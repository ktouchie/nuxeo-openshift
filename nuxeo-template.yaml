apiVersion: v1
kind: Template
message: |-
  A nuxeo deployment has been created. Once ready it will be accessible at  http://${APPLICATION_URL}.

  The default admin user is:

    User: Administrator
    Password: Administrator

  For more information on Nuxeo, you can go to https://doc.nuxeo.com/
metadata:  
  name: nuxeo-cluster
  namespace: openshift
  annotations:
    description: This templates setup a Nuxeo cluster backed by a Nuxeo backings template. 
    openshift.io/display-name: Nuxeo Cluster deployment
    template.openshift.io/documentation-url: https://github.com/nuxeo/nuxeo-openshift
    template.openshift.io/long-description: |-
      This templates setup a Nuxeo cluster backed by a Nuxeo backings template. 
    template.openshift.io/provider-display-name: Nuxeo
    template.openshift.io/support-url: https://answers.nuxeo.com/
    iconClass: icon-java
    tags: java, nuxeo
parameters:
  - description: The name for the application.
    name: APPLICATION_NAME
    value: nuxeo
    required: true
  - description: The URL of the application
    name: APPLICATION_URL
    value: nuxeo.apps.io.nuxeo.com
    required: true
  - description: Backings template name
    name: NUXEO_BACKINGS_NAME
    value: nuxeo-backings
    required: true
  - description: A Nuxeo Connect userId passed to the build of the image.
    name: NUXEO_CONNECT_USERNAME
    required: false
  - description: The password of the Nuxeo Connect account passed to the build of the image.
    name: NUXEO_CONNECT_PASSWORD
    required: false
  - description: The name of the studio project passed to the build of the image.
    name: NUXEO_STUDIO_PROJECT
    required: false
  - description: The version of the studio project passed the build of the image
    name: NUXEO_STUDIO_VERSION
    required: false
    value: 0.0.0-SNAPSHOT
  - description: Name of the MongoDB replica set
    name: MONGODB_REPLICASET_NAME
    value: rs0
    required: true
  - description: Elasticsearch cluster name
    name: ELASTICSEARCH_CLUSTER_NAME
    value: nuxeo
    required: true
  - description: Size of persistent storage for Binaries.
    name: VOLUME_BINARIES_CAPACITY
    value: 50Gi
    required: true


objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APPLICATION_NAME}-connect
    labels:
      app: ${APPLICATION_NAME}
  stringData:
    connect.properties: |-
      NUXEO_STUDIO_PROJECT=${NUXEO_STUDIO_PROJECT}
      NUXEO_STUDIO_PROJECT_VERSION=${NUXEO_STUDIO_VERSION}
      NUXEO_CONNECT_USERNAME=${NUXEO_CONNECT_USERNAME}
      NUXEO_CONNECT_PASSWORD=${NUXEO_CONNECT_PASSWORD}


- apiVersion: v1
  kind: ImageStream
  metadata:      
    creationTimestamp: null
    name: ${APPLICATION_NAME}-nuxeo
    labels:
      app: ${APPLICATION_NAME}
  spec:
    dockerImageRepository: nuxeo


- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-class: gluster-cns-slow
    creationTimestamp: null
    name: ${APPLICATION_NAME}-binaries
    labels:
      app: ${APPLICATION_NAME}
      role: data
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_BINARIES_CAPACITY}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-conf   
    labels:
      app: ${APPLICATION_NAME}
      role: config
  data:
    nuxeo.conf: |
      # Additional nuxeo.conf parameters      
    init.sh: |
      #!/bin/sh

      ## Need to use nss_wrapper in order to make LibreOffice conversion works
      ## cf https://docs.openshift.com/enterprise/3.2/creating_images/guidelines.html
      export USER_ID=$(id -u)
      export GROUP_ID=$(id -g)

      cat > /tmp/passwd <<EOT
      root:x:0:0:root:/root:/bin/bash
      nuxeo:x:${USER_ID}:${GROUP_ID}:Nuxeo server:/opt/nuxeo/server:/bin/bash
      EOT

      export LD_PRELOAD=/usr/lib/libnss_wrapper.so
      export NSS_WRAPPER_PASSWD=/tmp/passwd
      export NSS_WRAPPER_GROUP=/etc/group

      if [ ! -f $NUXEO_DATA/instance.clid -a -f /opt/nuxeo/connect/connect.properties ]; then
        . /opt/nuxeo/connect/connect.properties
        if [ -n "$NUXEO_CONNECT_USERNAME" -a -n "$NUXEO_CONNECT_PASSWORD" -a -n "$NUXEO_STUDIO_PROJECT" ]; then  
          echo "---> Registering instance on connect"
          nuxeoctl register $NUXEO_CONNECT_USERNAME $NUXEO_STUDIO_PROJECT dev openshift $NUXEO_CONNECT_PASSWORD
        fi
      fi

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
      component: nuxeo
    name: ${APPLICATION_NAME}-nuxeo
  spec:
    strategy:
      type: Rolling
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    replicas: 2
    selector:
      app: ${APPLICATION_NAME}
      component: nuxeo
      deploymentconfig: ${APPLICATION_NAME}-nuxeo
    
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          component: nuxeo          
          deploymentconfig: ${APPLICATION_NAME}-nuxeo
      spec:
        containers:
        - image: ${APPLICATION_NAME}-nuxeo:latest
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ${APPLICATION_NAME}-appserver
          env:
          - name: NUXEO_TEMPLATES
            value: "default,mongodb,mongodb-audit"
          - name: NUXEO_CUSTOM_PARAM
            value: |
              nuxeo.mongodb.server=mongodb://${NUXEO_BACKINGS_NAME}-mongo-0.${NUXEO_BACKINGS_NAME}-mongo:27017,${NUXEO_BACKINGS_NAME}-mongo-1.${NUXEO_BACKINGS_NAME}-mongo:27017,${NUXEO_BACKINGS_NAME}-mongo-2.${NUXEO_BACKINGS_NAME}-mongo:27017
              nuxeo.mongodb.dbname=${APPLICATION_NAME}
              kafka.enabled=true
              nuxeo.stream.work.enabled=true
              kafka.zkServers=${NUXEO_BACKINGS_NAME}-zookeeper:2181              
              kafka.bootstrap.servers=${NUXEO_BACKINGS_NAME}-kafka-0.${NUXEO_BACKINGS_NAME}-kafka:9092,${NUXEO_BACKINGS_NAME}-kafka-1.${NUXEO_BACKINGS_NAME}-kafka:9092,${NUXEO_BACKINGS_NAME}-kafka-2.${NUXEO_BACKINGS_NAME}-kafka:9092
              kafka.topicPrefix=${APPLICATION_NAME}-
              elasticsearch.client=RestClient
              elasticsearch.httpReadOnly.baseUrl=http://${NUXEO_BACKINGS_NAME}-elasticsearch:9200
              elasticsearch.indexName=${APPLICATION_NAME}
              # No Redis, so we don't use DBS cache
              nuxeo.dbs.cache.enabled=false
              
          - name: NUXEO_PACKAGES
            value: nuxeo-jsf-ui nuxeo-web-ui
          - name: NUXEO_ES_HOSTS
            value: ${NUXEO_BACKINGS_NAME}-elasticsearch-discovery:9200
          - name: NUXEO_ES_CLUSTERNAME
            value: ${ELASTICSEARCH_CLUSTER_NAME}
          - name: NUXEO_ES_REPLICAS
            value: "2"
          - name: NUXEO_BINARY_STORE
            value: /binaries

          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - name: ${APPLICATION_NAME}-binaries
            mountPath: /binaries
          - name: nuxeoconf
            mountPath: /docker-entrypoint-initnuxeo.d
          - name: connect-secret
            mountPath: /opt/nuxeo/connect
        volumes:
        - name: ${APPLICATION_NAME}-binaries
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-binaries
        - name: nuxeoconf
          configMap:
            name: ${APPLICATION_NAME}-conf  
        - name: connect-secret
          secret:
            secretName: ${APPLICATION_NAME}-connect

        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        
        
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-appserver
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-nuxeo:latest
      
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-nuxeo
    labels:
      app: ${APPLICATION_NAME}
      component: nuxeo
      role: lb
  spec:
    type: LoadBalancer
    selector:
      app: ${APPLICATION_NAME}
      component: nuxeo
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-nuxeo-route  
  spec:
    # TODO: Add parameter
    host: ${APPLICATION_URL}
    to:
      kind: Service
      name: ${APPLICATION_NAME}-nuxeo
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None

