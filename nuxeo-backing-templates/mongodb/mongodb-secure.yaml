apiVersion: v1
kind: Template
labels:
  template: mongodb-statefulset-replication-template
message: |-
  The following service(s) have been created in your project: ${MONGODB_SERVICE_NAME}.

metadata:
  annotations:
    description: |-
      MongoDB database service, with statefulset replication with authentication and SSL
    iconClass: icon-mongodb
    openshift.io/display-name: MongoDB StatefulSet Replication

    openshift.io/long-description: This template provides a MongoDB replica set with
      a database created. The database is stored on persistent storage.  The database
      name, username, and password are chosen via parameters when provisioning this
      service.
    openshift.io/provider-display-name: Nuxeo
    openshift.io/support-url: https://github.com/nuxeo-sandbox/nuxeo-openshift
    tags: database,mongodb
  creationTimestamp: null
  name: mongodb-secure
parameters:
- description: The name of the backings stack.
  displayName: The name of the backings stack.
  name: NUXEO_BACKINGS_NAME
  required: true
  value: "nuxeo-backings"
- description: MongoDB Admin user.
  displayName: MongoDB Admin user.
  name: MONGODB_ADMIN_USER
  required: true
  value: admin
- description: MongoDB Admin password.
  displayName: MongoDB Admin password.
  name: MONGODB_ADMIN_PASSWORD
  required: true
  from: "[a-zA-Z0-9]{12}"
  generate: "expression" 
- description: Number of replicas.
  displayName: Number of replicas.
  name: MONGODB_REPLICAS_NUMBER
  required: true
  value: "3"
- description: MongoDB Replicaset name.
  displayName: MongoDB Replicaset name.
  name: MONGODB_REPLICASET_NAME
  required: true
  value: "rs0"
- description: The image repository
  name: IMAGE_REPOSITORY
  value: mongo
  required: true
- description: The image tag
  name: IMAGE_TAG
  value: "3.4"
  required: true
- description: MongoDB Storage size. 
  displayName: MongoDB Storage size.
  name: MONGODB_STORAGE_SIZE
  value: 10Gi
  required: true
- description: MongoDB Storage class. 
  displayName: MongoDB Storage class.
  name: MONGODB_STORAGE_CLASS
  value: aws-fast
  required: true

objects:

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      
    name: ${NUXEO_BACKINGS_NAME}-mongodb
  spec:
    type: ClusterIP
    clusterIP: None
    ports:
      - name: peer
        port: 27017
    selector:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      

- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      
    name: ${NUXEO_BACKINGS_NAME}-mongodb
  spec:
    selector:
      matchLabels:
        app: ${NUXEO_BACKINGS_NAME}
        component: mongodb        

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      
    name: ${NUXEO_BACKINGS_NAME}-mongodb-config
  data:
    mongod.conf: |
      # Put mongod.conf configuration here

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      
    name: ${NUXEO_BACKINGS_NAME}-mongodb-init
  data:
    on-start.sh: |
      #!/usr/bin/env bash
      # Copyright 2016 The Kubernetes Authors. All rights reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #     http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.

      replica_set="$REPLICA_SET"
      script_name=${0##*/}

      if [[ "$AUTH" == "true" ]]; then
          admin_user="$ADMIN_USER"
          admin_password="$ADMIN_PASSWORD"
          admin_creds=(-u "$admin_user" -p "$admin_password")
          auth_args=(--auth --keyFile=/data/configdb/key.txt)
      fi

      function log() {
          local msg="$1"
          local timestamp
          timestamp=$(date --iso-8601=ns)
          echo "[$timestamp] [$script_name] $msg" >> /work-dir/log.txt
      }

      function shutdown_mongo() {
          if [[ $# -eq 1 ]]; then
              args="timeoutSecs: $1"
          else
              args='force: true'
          fi
          log "Shutting down MongoDB ($args)..."
          mongo admin "${admin_creds[@]}" "${ssl_args[@]}" --eval "db.shutdownServer({$args})"
      }

      my_hostname=$(hostname)
      log "Bootstrapping MongoDB replica set member: $my_hostname"

      log "Reading standard input..."
      while read -ra line; do
          if [[ "${line}" == *"${my_hostname}"* ]]; then
              service_name="$line"
              continue
          fi
          peers=("${peers[@]}" "$line")
      done

      # Generate the ca cert
      ca_crt=/data/configdb/tls.crt
      if [ -f "$ca_crt"  ]; then
          log "Generating certificate"
          ca_key=/data/configdb/tls.key
          pem=/work-dir/mongo.pem
          ssl_args=(--ssl --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")
          ssl_server_args=(--sslMode requireSSL --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")
          pushd /work-dir
      cat >openssl.cnf <<EOL
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = $(echo -n "$my_hostname" | sed s/-[0-9]*$//)
      DNS.2 = $my_hostname
      DNS.3 = $service_name
      DNS.4 = localhost
      DNS.5 = 127.0.0.1
      EOL

          # Generate the certs
          openssl genrsa -out mongo.key 2048
          openssl req -new -key mongo.key -out mongo.csr -subj "/CN=$my_hostname" -config openssl.cnf
          openssl x509 -req -in mongo.csr \
              -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial \
              -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

          rm mongo.csr
          cat mongo.crt mongo.key > $pem
          rm mongo.key mongo.crt
      fi
      popd

      log "Peers: ${peers[*]}"

      log "Starting a MongoDB instance..."
      mongod --config /data/configdb/mongod.conf --dbpath=/data/db --replSet="$replica_set" --port=27017 "${auth_args[@]}" "${ssl_server_args[@]}" --bind_ip 0.0.0.0 >> /work-dir/log.txt 2>&1 &

      log "Waiting for MongoDB to be ready..."
      until mongo "${ssl_args[@]}" --eval "db.adminCommand('ping')"; do
          log "Retrying..."
          sleep 2
      done

      log "Initialized."

      # try to find a master and add yourself to its replica set.
      for peer in "${peers[@]}"; do
          if mongo admin --host "$peer" "${admin_creds[@]}" "${ssl_args[@]}" --eval "rs.isMaster()" | grep '"ismaster" : true'; then
              log "Found master: $peer"
              log "Adding myself ($service_name) to replica set..."
              mongo admin --host "$peer" "${admin_creds[@]}" "${ssl_args[@]}" --eval "rs.add('$service_name')"

              sleep 3

              log 'Waiting for replica to reach SECONDARY state...'
              until printf '.'  && [[ $(mongo admin "${admin_creds[@]}" "${ssl_args[@]}" --quiet --eval "rs.status().myState") == '2' ]]; do
                  sleep 1
              done

              log '✓ Replica reached SECONDARY state.'

              shutdown_mongo "60"
              log "Good bye."
              exit 0
          fi
      done

      # else initiate a replica set with yourself.
      if mongo "${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"; then
          log "Initiating a new replica set with myself ($service_name)..."
          mongo "${ssl_args[@]}" --eval "rs.initiate({'_id': '$replica_set', 'members': [{'_id': 0, 'host': '$service_name'}]})"

          sleep 3

          log 'Waiting for replica to reach PRIMARY state...'
          until printf '.'  && [[ $(mongo "${ssl_args[@]}" --quiet --eval "rs.status().myState") == '1' ]]; do
              sleep 1
          done

          log '✓ Replica reached PRIMARY state.'

          if [[ "$AUTH" == "true" ]]; then
              log "Creating admin user..."
              mongo admin "${ssl_args[@]}" --eval "db.createUser({user: '$admin_user', pwd: '$admin_password', roles: [{role: 'root', db: 'admin'}]})"
          fi

          log "Done."
      fi

      shutdown_mongo
      log "Good bye."

- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb      
    name: ${NUXEO_BACKINGS_NAME}-mongodb-credentials
  type: Opaque
  stringData:
    user: ${MONGODB_ADMIN_USER}
    password: ${MONGODB_ADMIN_PASSWORD}
  

- apiVersion: apps/v1beta2
  kind: StatefulSet
  metadata:
    labels:
      app: ${NUXEO_BACKINGS_NAME}
      component: mongodb
    name: ${NUXEO_BACKINGS_NAME}-mongodb
  spec:
    selector:
      matchLabels:
        app: ${NUXEO_BACKINGS_NAME}
        component: mongodb
    serviceName: ${NUXEO_BACKINGS_NAME}-mongodb
    replicas: ${MONGODB_REPLICAS_NUMBER}
    template:
      metadata:
        labels:
          app: ${NUXEO_BACKINGS_NAME}
          component: mongodb        
      spec:
        initContainers:
          - name: copy-config
            image: busybox
            command:
              - "sh"
            args:
              - "-c"
              - |
                set -e
                set -x

                cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf

                # Encryption                
                cp /ca-readonly/tls.key /data/configdb/tls.key
                cp /ca-readonly/tls.crt /data/configdb/tls.crt

                # Authentication
                cp /keydir-readonly/key.txt /data/configdb/key.txt
                chmod 600 /data/configdb/key.txt

            volumeMounts:
              - name: workdir
                mountPath: /work-dir
              - name: config
                mountPath: /configdb-readonly
              - name: configdir
                mountPath: /data/configdb
              - name: ca
                mountPath: /ca-readonly
              - name: keydir
                mountPath: /keydir-readonly
          - name: install
            image: k8s.gcr.io/mongodb-install:0.6  
            args:
              - --work-dir=/work-dir
            imagePullPolicy: "Always"
            volumeMounts:
              - name: workdir
                mountPath: /work-dir
          - name: bootstrap
            image: "${IMAGE_REPOSITORY}:${IMAGE_TAG}"
            command:
              - /work-dir/peer-finder
            args:
              - -on-start=/init/on-start.sh
              - "-service=${NUXEO_BACKINGS_NAME}-mongodb"
            imagePullPolicy: "Always"
            env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: REPLICA_SET
                value: ${MONGODB_REPLICASET_NAME}            
              - name: AUTH
                value: "true"
              - name: ADMIN_USER
                valueFrom:
                  secretKeyRef:
                    name: ${NUXEO_BACKINGS_NAME}-mongodb-credentials
                    key: user
              - name: ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${NUXEO_BACKINGS_NAME}-mongodb-credentials
                    key: password
            volumeMounts:
              - name: workdir
                mountPath: /work-dir
              - name: init
                mountPath: /init
              - name: configdir
                mountPath: /data/configdb
              - name: data
                mountPath: /data/db
        containers:
          - name: ${MONGODB_REPLICASET_NAME}
            image: "${IMAGE_REPOSITORY}:${IMAGE_TAG}"
            imagePullPolicy: "Always"          
            ports:
              - name: peer
                containerPort: 27017
            resources:
               limits:
                 cpu: 500m
                 memory: 512Mi
               requests:
                 cpu: 100m
                 memory: 256Mi
            command:
              - mongod
            args:
              - --config=/data/configdb/mongod.conf
              - --dbpath=/data/db
              - --replSet=${MONGODB_REPLICASET_NAME}
              - --port=27017
              - --bind_ip 
              - "0.0.0.0"
              - --auth
              - --keyFile=/data/configdb/key.txt
              - --sslMode
              - requireSSL
              - --sslCAFile=/data/configdb/tls.crt
              - --sslPEMKeyFile=/work-dir/mongo.pem

            livenessProbe:
              exec:
                command:
                  - mongo
                  - --ssl
                  - --sslCAFile=/data/configdb/tls.crt
                  - --sslPEMKeyFile=/work-dir/mongo.pem
                  - --eval
                  - "db.adminCommand('ping')"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              failureThreshold: 3
              periodSeconds: 10
              successThreshold: 1
            readinessProbe:
              exec:
                command:
                  - mongo
                  - --ssl
                  - --sslCAFile=/data/configdb/tls.crt
                  - --sslPEMKeyFile=/work-dir/mongo.pem
                  - --eval
                  - "db.adminCommand('ping')"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              failureThreshold: 3
              periodSeconds: 10
              successThreshold: 1
            volumeMounts:
              - name: data
                mountPath: /data/db
              - name: configdir
                mountPath: /data/configdb
              - name: workdir
                mountPath: /work-dir      
        volumes:
          - name: config
            configMap:
              name: ${NUXEO_BACKINGS_NAME}-mongodb-config
          - name: init
            configMap:
              defaultMode: 0755
              name: ${NUXEO_BACKINGS_NAME}-mongodb-init
          - name: ca
            secret:
              defaultMode: 0400
              secretName: ${NUXEO_BACKINGS_NAME}-mongodb-certs
          - name: keydir
            secret:
              defaultMode: 0400
              secretName: ${NUXEO_BACKINGS_NAME}-mongodb-key
          - name: workdir
            emptyDir: {}
          - name: configdir
            emptyDir: {}

    volumeClaimTemplates:
      - metadata:
          name: data          
        spec:
          accessModes:          
            - "ReadWriteOnce"
          resources:
            requests:
              storage: ${MONGODB_STORAGE_SIZE}
          storageClassName: "${MONGODB_STORAGE_CLASS}"
        